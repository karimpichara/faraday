"""generate tables

Revision ID: 12e4f5bc0229
Revises:
Create Date: 2025-08-07 18:15:58.053707

"""

from alembic import op
import sqlalchemy as sa
from sqlalchemy import text
import uuid
from datetime import datetime, timezone
from werkzeug.security import generate_password_hash


# revision identifiers, used by Alembic.
revision = "12e4f5bc0229"
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "empresas_externas_toa",
        sa.Column("nombre", sa.String(length=128), nullable=False),
        sa.Column("nombre_toa", sa.String(length=128), nullable=False),
        sa.Column("rut", sa.String(length=16), nullable=False),
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("uuid", sa.String(length=36), nullable=False),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=False),
        sa.Column("active", sa.Boolean(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("uuid"),
    )
    with op.batch_alter_table("empresas_externas_toa", schema=None) as batch_op:
        batch_op.create_index(
            batch_op.f("ix_empresas_externas_toa_active"), ["active"], unique=False
        )

    op.create_table(
        "historia_ot_empresas",
        sa.Column("zona", sa.String(length=64), nullable=False),
        sa.Column("orden_de_trabajo", sa.String(length=64), nullable=False),
        sa.Column("empresa", sa.String(length=128), nullable=False),
        sa.Column("tecnico", sa.String(length=128), nullable=False),
        sa.Column("coord_x", sa.String(length=32), nullable=False),
        sa.Column("coord_y", sa.String(length=32), nullable=False),
        sa.Column("duracion", sa.String(length=128), nullable=False),
        sa.Column("estado", sa.String(length=128), nullable=False),
        sa.Column("fecha", sa.String(length=128), nullable=False),
        sa.Column("flag_consulta_vecino", sa.String(length=128), nullable=False),
        sa.Column("flag_estado_aprovision", sa.String(length=128), nullable=False),
        sa.Column("flag_fallas_masivas", sa.String(length=128), nullable=False),
        sa.Column("flag_materiales", sa.String(length=128), nullable=False),
        sa.Column("flag_niveles", sa.String(length=128), nullable=False),
        sa.Column("hora_flag_estado_aprovision", sa.String(length=128), nullable=False),
        sa.Column("hora_flag_fallas_masivas", sa.String(length=128), nullable=False),
        sa.Column("hora_flag_materiales", sa.String(length=128), nullable=False),
        sa.Column("hora_flag_niveles", sa.String(length=128), nullable=False),
        sa.Column("inicio", sa.String(length=128), nullable=False),
        sa.Column("intervencion_neutra", sa.String(length=128), nullable=False),
        sa.Column("notas_consulta_vecino", sa.String(length=8000), nullable=True),
        sa.Column(
            "notas_consulta_vecino_ultimo", sa.String(length=8000), nullable=True
        ),
        sa.Column("qr_drop", sa.String(length=128), nullable=False),
        sa.Column("rut_tecnico", sa.String(length=128), nullable=False),
        sa.Column("tipo_red_producto", sa.String(length=128), nullable=False),
        sa.Column("hora_ultima_vecino", sa.String(length=128), nullable=True),
        sa.Column("hora_qr", sa.String(length=128), nullable=False),
        sa.Column("tipo_actividad", sa.String(length=128), nullable=False),
        sa.Column("zona_de_trabajo", sa.String(length=128), nullable=False),
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("uuid", sa.String(length=36), nullable=False),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=False),
        sa.Column("active", sa.Boolean(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("uuid"),
    )
    with op.batch_alter_table("historia_ot_empresas", schema=None) as batch_op:
        batch_op.create_index(
            batch_op.f("ix_historia_ot_empresas_active"), ["active"], unique=False
        )

    op.create_table(
        "roles",
        sa.Column("name", sa.String(length=50), nullable=True),
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("uuid", sa.String(length=36), nullable=False),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=False),
        sa.Column("active", sa.Boolean(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("name"),
        sa.UniqueConstraint("uuid"),
    )
    with op.batch_alter_table("roles", schema=None) as batch_op:
        batch_op.create_index(batch_op.f("ix_roles_active"), ["active"], unique=False)

    op.create_table(
        "users",
        sa.Column("username", sa.String(length=64), nullable=False),
        sa.Column("password", sa.String(length=256), nullable=False),
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("uuid", sa.String(length=36), nullable=False),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=False),
        sa.Column("active", sa.Boolean(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("username"),
        sa.UniqueConstraint("uuid"),
    )
    with op.batch_alter_table("users", schema=None) as batch_op:
        batch_op.create_index(batch_op.f("ix_users_active"), ["active"], unique=False)

    op.create_table(
        "ordenes_trabajo",
        sa.Column("codigo", sa.String(length=32), nullable=False),
        sa.Column("id_empresa", sa.Integer(), nullable=False),
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("uuid", sa.String(length=36), nullable=False),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=False),
        sa.Column("active", sa.Boolean(), nullable=False),
        sa.ForeignKeyConstraint(
            ["id_empresa"],
            ["empresas_externas_toa.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("uuid"),
    )
    with op.batch_alter_table("ordenes_trabajo", schema=None) as batch_op:
        batch_op.create_index(
            batch_op.f("ix_ordenes_trabajo_active"), ["active"], unique=False
        )

    op.create_table(
        "user_roles",
        sa.Column("user_id", sa.Integer(), nullable=True),
        sa.Column("role_id", sa.Integer(), nullable=True),
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("uuid", sa.String(length=36), nullable=False),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=False),
        sa.Column("active", sa.Boolean(), nullable=False),
        sa.ForeignKeyConstraint(["role_id"], ["roles.id"], ondelete="CASCADE"),
        sa.ForeignKeyConstraint(["user_id"], ["users.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("user_id", "role_id", name="uq_user_role"),
        sa.UniqueConstraint("uuid"),
    )
    with op.batch_alter_table("user_roles", schema=None) as batch_op:
        batch_op.create_index(
            batch_op.f("ix_user_roles_active"), ["active"], unique=False
        )

    op.create_table(
        "comentarios",
        sa.Column("comentario", sa.String(length=256), nullable=False),
        sa.Column("id_orden_trabajo", sa.Integer(), nullable=False),
        sa.Column("id_usuario", sa.Integer(), nullable=False),
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("uuid", sa.String(length=36), nullable=False),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=False),
        sa.Column("active", sa.Boolean(), nullable=False),
        sa.ForeignKeyConstraint(
            ["id_orden_trabajo"],
            ["ordenes_trabajo.id"],
        ),
        sa.ForeignKeyConstraint(
            ["id_usuario"],
            ["users.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("uuid"),
    )
    with op.batch_alter_table("comentarios", schema=None) as batch_op:
        batch_op.create_index(
            batch_op.f("ix_comentarios_active"), ["active"], unique=False
        )

    # Create default admin role and dev user
    conn = op.get_bind()

    # Create admin role
    role_uuid = str(uuid.uuid4())
    current_time = datetime.now(timezone.utc)
    conn.execute(
        text(
            """
        INSERT INTO roles (uuid, created_at, updated_at, active, name)
        VALUES (:uuid, :created_at, :updated_at, :active, :name)
    """
        ),
        {
            "uuid": role_uuid,
            "created_at": current_time,
            "updated_at": current_time,
            "active": True,
            "name": "admin",
        },
    )
    role_id = conn.execute(
        text("SELECT id FROM roles WHERE uuid = :uuid"), {"uuid": role_uuid}
    ).fetchone()[0]

    # Create dev user
    user_uuid = str(uuid.uuid4())
    hashed_password = generate_password_hash("devSbip.37")
    conn.execute(
        text(
            """
        INSERT INTO users (uuid, created_at, updated_at, active, username, password)
        VALUES (:uuid, :created_at, :updated_at, :active, :username, :password)
    """
        ),
        {
            "uuid": user_uuid,
            "created_at": current_time,
            "updated_at": current_time,
            "active": True,
            "username": "dev",
            "password": hashed_password,
        },
    )
    user_id = conn.execute(
        text("SELECT id FROM users WHERE uuid = :uuid"), {"uuid": user_uuid}
    ).fetchone()[0]

    # Assign admin role to dev user
    user_role_uuid = str(uuid.uuid4())
    conn.execute(
        text(
            """
        INSERT INTO user_roles (uuid, created_at, updated_at, active, user_id, role_id)
        VALUES (:uuid, :created_at, :updated_at, :active, :user_id, :role_id)
    """
        ),
        {
            "uuid": user_role_uuid,
            "created_at": current_time,
            "updated_at": current_time,
            "active": True,
            "user_id": user_id,
            "role_id": role_id,
        },
    )

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    # Note: Dev user and admin role will be removed when tables are dropped
    with op.batch_alter_table("comentarios", schema=None) as batch_op:
        batch_op.drop_index(batch_op.f("ix_comentarios_active"))

    op.drop_table("comentarios")
    with op.batch_alter_table("user_roles", schema=None) as batch_op:
        batch_op.drop_index(batch_op.f("ix_user_roles_active"))

    op.drop_table("user_roles")
    with op.batch_alter_table("ordenes_trabajo", schema=None) as batch_op:
        batch_op.drop_index(batch_op.f("ix_ordenes_trabajo_active"))

    op.drop_table("ordenes_trabajo")
    with op.batch_alter_table("users", schema=None) as batch_op:
        batch_op.drop_index(batch_op.f("ix_users_active"))

    op.drop_table("users")
    with op.batch_alter_table("roles", schema=None) as batch_op:
        batch_op.drop_index(batch_op.f("ix_roles_active"))

    op.drop_table("roles")
    with op.batch_alter_table("historia_ot_empresas", schema=None) as batch_op:
        batch_op.drop_index(batch_op.f("ix_historia_ot_empresas_active"))

    op.drop_table("historia_ot_empresas")
    with op.batch_alter_table("empresas_externas_toa", schema=None) as batch_op:
        batch_op.drop_index(batch_op.f("ix_empresas_externas_toa_active"))

    op.drop_table("empresas_externas_toa")
    # ### end Alembic commands ###
